[baselayout]
shiftStates    =			0	:	1	:	2	:	6	:	7		;	8	:	9
;; SC = VKEY    	CStat	Base	Shift	Ctrl	AltGr	AGrSh	;	SGCap	SGCSh

QWLSH = LShift  	Modifier	; SC02a: Maps LShift to itself (allows Extend and sticky mods)
QWRSH = RShift  	Modifier	; SC136: Maps RShift to itself
;QWLCT = LCtrl   	Modifier	; SC01d: Maps LCtrl to itself - WARNING: Causes trouble w/ AltGr for now.
;QWRCT = RShift   	Modifier	; SC11d: Maps RCtrl to itself
QWRAL = AltGr       Modifier    ;
;QWLAL = LMENU   	VirtualKey	; SC038: LAlt isn't easily remapped. This only partially works.

QWESC = ESCAPE  	VirtualKey 		; SC001: Esc
QW_F1 = F1      	VirtualKey 		; SC03b:  F1
QW_F2 = F2      	VirtualKey 		; SC03c:  F2
QW_F3 = F3      	VirtualKey 		; SC03d:  F3
QW_F4 = F4      	VirtualKey 		; SC03e:  F4
QW_F5 = F5      	VirtualKey 		; SC03f:  F5
QW_F6 = F6      	VirtualKey 		; SC040:  F6
QW_F7 = F7      	VirtualKey 		; SC041:  F7
QW_F8 = F8      	VirtualKey 		; SC042:  F8
QW_F9 = F9      	VirtualKey 		; SC043:  F9
QWF10 = F10     	VirtualKey 		; SC044: F10
QWF11 = F11     	VirtualKey 		; SC057: F11
QWF12 = F12     	VirtualKey 		; SC058: F12

QWPSC = SNAPSHOT	VirtualKey 		; SC137: PrtScn
QWSLK = SCROLL  	VirtualKey 		; SC046: ScrlLck
QWINS = INSERT  	VirtualKey 		; SC152: Ins
QWDEL = DELETE  	VirtualKey 		; SC153: Del
QWHOM = HOME    	VirtualKey 		; SC147: Home
QWEND = END     	VirtualKey 		; SC14f: End
QWPGU = PRIOR   	VirtualKey 		; SC149: PgUp
QWPGD = NEXT    	VirtualKey 		; SC151: PgDn

QWBSP = BACK    	VirtualKey 		; SC00e: BackSpace
;QWTAB = TAB     	VirtualKey 		; SC00f: Tab
QWENT = RETURN  	VirtualKey 		; SC01c: Enter


QW_GR = QW_GR   	0   	`   	##   	--  	@07e	≈   	; SC029: US `~ - dk_Tilde (ANS/ISO OEM_3/OEM_5)
QW_1  = 1       	0   	1   	##   	--  	@323	¡   	; SC002: US 1! - dk_DotBelow
QW_2  = 2       	0   	2   	##   	--  	@309	²   	; SC003: US 2@ - dk_HookAbove/PalatalHook
QW_3  = 3       	0   	3   	##   	--  	@0b5	³   	; SC004: US 3# - dk_Horn/Tail/RetroflexHook
QW_4  = 4       	0   	4   	##   	--  	@0a4	£   	; SC005: US 4$ - dk_Currency
QW_5  = 5       	0   	5   	##   	--  	@31b	‰   	; SC006: US 5% - dk_Greek(Mu)
QW_6  = 6       	0   	6   	##   	--  	@05e	∂   	; SC007: US 6^ - dk_Circumflex
QW_7  = QW_EQ   	0   	=   	+   	--  	≠     	≈   	; SC008: US 7& - dk_Caron
QW_8  = 7       	0   	7   	##   	--  	/   	∞   	; SC009: US 8* - dk_Ogonek/CommaBelow
QW_9  = 8       	0   	8   	##   	--  	*   	·   	; SC00a: US 9( - dk_Breve
QW_0  = 9       	0   	9   	##   	--  	-   	°   	; SC00b: US 0) - dk_RingAbove/Lig
QW_MN = 0       	0   	0   	##   	--  	@0af	±   	; SC00c: US -_ - dk_Macron (ANS/ISO _MINUS/_PLUS)
QW_EQ = QW_MN   	0   	-   	_   	--  	w	w	≠   	; SC00d: US =+ - dk_DblAcute/Sci (ANS/ISO _PLUS/_4)

QW_Q  = QW_SC   	0   	;   	##   	--  	@   	„   	; SC010: QW qQ
QW_W  = W       	1   	w   	##   	--  	%   	“   	; SC011: QW wW
QW_E  = F       	1   	f   	##   	--  	#   	”   	; SC012: QW eE
QW_R  = P       	1   	p   	##   	--  	^   	¶   	; SC013: QW rR
QW_T  = B       	5   	b   	##   	--  	$   	Ŋ   	; SC014: QW tT
QW_Y  = QW_LB       4   	[   	##   	--  	--   	Ʃ   	; SC015: QW yY
QW_U  = J       	5   	j   	##   	--  	--  	Ł   	; SC016: QW uU
QW_I  = L       	5   	l   	##   	--  	7   	<=   	; SC017: QW iI
QW_O  = U       	1   	u   	##   	--  	8   	↑   	; SC018: QW oO
QW_P  = Y       	1   	y   	##   	--  	9	    =>   	; SC019: QW pP - dk_Umlaut (ANS/ISO _1/_3)
QW_LB = QW_QU   	0   	'   	##   	--	    +   	Å   	; '
QW_RB = Q       	1   	q   	##  	--  	_   	Æ   	; SC01b: US ]} Cmk[eD]-## (ANS/ISO _6/_1)
QW_BS = QW_BS   	0   	\   	##   	--      `   	~   	; SC02b: US \|  - dk_Grave/Subscript (ANS/ISO _5/_2)

QW_A  = A       	1   	a   	##   	--  	!   	¡   	; SC01e: QW aA
QW_S  = R       	1   	r   	##   	--  	&   	|   	; SC01f: QW sS
QW_D  = S       	1   	s   	##   	--  	{   	--   	; SC020: QW dD
QW_F  = T       	5   	t   	##   	--  	(   	--   	; SC021: QW fF
QW_G  = G       	5   	g   	##   	--  	[   	--   	; SC022: QW gG
QW_H  = QW_RB   	4   	]   	##   	--  	æ   	--   	; SC023: QW hH
QW_J  = K       	5   	k   	##   	--  	-   	–   	; SC024: QW jJ
QW_K  = N       	1   	n   	##   	--  	1   	←   	; SC025: QW kK
QW_L  = E       	1   	e   	##   	--  	2   	↓   	; SC026: QW lL
QW_SC = I       	1   	i   	##   	--  	3   	→   	; SC027: QW ;:
QW_QU = O       	1   	o   	##   	--  	=   	′   	; SC028: US '"" - dk_Acute/Superscript (ANS/ISO _7)


QW_Z  = X       	1   	x   	##   	--  	*   	×   	; SC02c: QW zZ
QW_X  = C       	1   	c   	##   	--  	}   	¢   	; SC02d: QW xX
QW_C  = D       	5   	d   	##   	--  	)   	--   	; SC02e: QW cC
QW_V  = V       	1   	v   	##   	--  	]   	γ   	; SC02f: QW vV
QW_B  = Z       	5   	z   	##   	--  	t   	β   	; SC030: QW bB
QW_N  = QW_SL   	0   	/   	##   	--  	t   	¿   	; SC031: QW nN
QW_M  = M       	1   	m   	##   	--  	0   	--   	; SC032: QW mM
QW_CM = H       	5   	h   	##   	--  	4       --  	; SC033: US ,< - dk_Cedilla (ANS/ISO OEM_COMMA)
QW_PD = QW_CM   	0   	,   	##   	--  	5   	≤   	; SC034: US .> - dk_DotAbove (ANS/ISO OEM_PERIOD)
QW_SL = QW_PD   	0   	.   	>   	--  	6   	≥   	; SC035: US /? - dk_Stroke/Bar (ANS/ISO _2/_MINUS)
QWSPC = SPACE   	0   	Spc 	Spc 	--  	Spc     _    	; SC039: Space (NBSP may cause trouble?)
QWPDT = QWPDT   	0   	.   	##   	--  	--  	--  	; SC053: Numpad Decimal (ANS/ISO DECIMAL)

QWCLK = BACK/Extend 	VKey


;;  Extend syntax:
;;  - The default is to Send {Blind}{<entry>}, so <entry> can be, e.g., a key name
;;  - Don't use empty Extend mappings. Comment them out instead.
;;  - EPKL Extend allows prefix-entry syntax, as in layout, dead key and string entries
;;  - →/%<entry> : Send literal string/ligature by the SendInput {Raw}<entry> method
;;  - §/$<entry> : Nonkeyboard inputs
;;  - α/*<entry> : Send <entry> directly, allowing AHK syntax (!+^# mods, {} key names)
;;  - β/=<entry> : Send {Blind}<entry> (same as default, without {} around <entry>)
;;  - «/~<entry> : Send the 4-digit hex Unicode point U+<entry>
;;  - Ð/@<entry> : Send the dead key named <entry> (may vary between layouts!)
;;  - ¶/&<entry> : Send the ligature named <entry>

[ext_NavEdit]
QWESC = *{CapsLock}
QW_F1 = Media_Play_Pause
QW_F2 = Media_Prev
QW_F3 = Media_Next
QW_F4 = Media_Stop
QW_F5 = Volume_Mute
QW_F6 = Volume_Down 1
QW_F7 = Volume_Up 1
;QW_F8 = 
;QW_F9 = 
;QWF10 = 
;QWF11 = 
;QWF12 = 

;QW_GR =
QW_1  = F1
QW_2  = F2
QW_3  = F3
QW_4  = F4
QW_5  = F5
QW_6  = F6
QW_7  = F12
QW_8  = F7
QW_9  = F8
QW_0  = F9
QW_MN = F10
QW_EQ = F11 
QWBSP = *^{BackSpace}

QWTAB = *+{tab}
QW_Q  = Esc
QW_W  = $WheelUp 1
QW_E  = *+{tab}
QW_R  = Tab
QW_T  = $WheelUp 2
QW_Y  = Esc
QW_U  = PgUp
QW_I  = Home
QW_O  = Up
QW_P  = End
QW_LB = Del
QW_RB = AppsKey
QW_BS = PrintScreen

QW_A  = Alt
QW_S  = $WheelDown 1
QW_D  = Shift
QW_F  = Ctrl
QW_G  = $WheelDown 2
QW_H  = Ins
QW_J  = PgDn
QW_K  = Left
QW_L  = Down
QW_SC = Right
QW_QU = BackSpace
QWENT = Enter

QW_Z  = =^x
QW_X  = =^c
QW_C  = *#p
QW_V  = =^v
QW_B  = =^z
;QW_N  = MButton
;QW_M  = RButton
;QW_CM = Click Rel -34,0,0
;QW_PD = Click Rel  34,0,0
;QW_SL = WheelRight
QWSPC = Enter

[ext_NumPad]
QW_I  = LButton
QW_O  = Click Rel 0,-34,0
QW_P  = RButton
QW_K  = Click Rel -34,0,0
QW_L  = Click Rel 0,34,0
QW_SC = Click Rel 34,0,0